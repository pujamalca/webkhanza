<?php

namespace Tests\Unit;

use App\Models\Bank;
use App\Models\BerkasPegawai;
use App\Models\Bidang;
use App\Models\Departemen;
use App\Models\Dokter;
use App\Models\EmergencyIndex;
use App\Models\JnjJabatan;
use App\Models\KelompokJabatan;
use App\Models\Pegawai;
use App\Models\Pendidikan;
use App\Models\Petugas;
use App\Models\ResikoKerja;
use App\Models\SttsKerja;
use App\Models\SttsWp;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class PegawaiModelTest extends TestCase
{
    // Note: Most tests in this class are skipped due to legacy database dependency
    // Use PegawaiModelMockTest for tests that don't require database

    public function test_pegawai_belongs_to_jnj_jabatan()
    {
        $this->markTestSkipped('Skipping database-dependent test - requires legacy database tables');
        
        $jnjJabatan = JnjJabatan::factory()->create([
            'kode' => 'JJ001',
            'nama' => 'Dokter Umum',
        ]);

        $pegawai = Pegawai::factory()->create([
            'jnj_jabatan' => 'JJ001',
        ]);

        $this->assertInstanceOf(JnjJabatan::class, $pegawai->jnjJabatanRelation);
        $this->assertEquals('Dokter Umum', $pegawai->jnjJabatanRelation->nama);
    }

    public function test_pegawai_belongs_to_kelompok_jabatan()
    {
        $kelompokJabatan = KelompokJabatan::factory()->create([
            'kode_kelompok' => 'KJ1',
            'nama_kelompok' => 'Tenaga Medis',
        ]);

        $pegawai = Pegawai::factory()->create([
            'kode_kelompok' => 'KJ1',
        ]);

        $this->assertInstanceOf(KelompokJabatan::class, $pegawai->kelompokJabatanRelation);
        $this->assertEquals('Tenaga Medis', $pegawai->kelompokJabatanRelation->nama_kelompok);
    }

    public function test_pegawai_belongs_to_resiko_kerja()
    {
        $resikoKerja = ResikoKerja::factory()->create([
            'kode_resiko' => 'R01',
            'nama_resiko' => 'Resiko Rendah',
        ]);

        $pegawai = Pegawai::factory()->create([
            'kode_resiko' => 'R01',
        ]);

        $this->assertInstanceOf(ResikoKerja::class, $pegawai->resikoKerjaRelation);
        $this->assertEquals('Resiko Rendah', $pegawai->resikoKerjaRelation->nama_resiko);
    }

    public function test_pegawai_belongs_to_emergency_index()
    {
        $emergencyIndex = EmergencyIndex::factory()->create([
            'kode_emergency' => 'E01',
            'nama_emergency' => 'Emergency Tinggi',
        ]);

        $pegawai = Pegawai::factory()->create([
            'kode_emergency' => 'E01',
        ]);

        $this->assertInstanceOf(EmergencyIndex::class, $pegawai->emergencyIndexRelation);
        $this->assertEquals('Emergency Tinggi', $pegawai->emergencyIndexRelation->nama_emergency);
    }

    public function test_pegawai_belongs_to_departemen()
    {
        $departemen = Departemen::factory()->create([
            'dep_id' => 'DEPT',
            'nama' => 'Departemen Test',
        ]);

        $pegawai = Pegawai::factory()->create([
            'departemen' => 'DEPT',
        ]);

        $this->assertInstanceOf(Departemen::class, $pegawai->departemenRelation);
        $this->assertEquals('Departemen Test', $pegawai->departemenRelation->nama);
    }

    public function test_pegawai_belongs_to_bidang()
    {
        $bidang = Bidang::factory()->create([
            'nama' => 'Medis',
        ]);

        $pegawai = Pegawai::factory()->create([
            'bidang' => 'Medis',
        ]);

        $this->assertInstanceOf(Bidang::class, $pegawai->bidangRelation);
        $this->assertEquals('Medis', $pegawai->bidangRelation->nama);
    }

    public function test_pegawai_belongs_to_stts_wp()
    {
        $sttsWp = SttsWp::factory()->create([
            'stts' => 'TK/0',
            'ktg' => 'Tidak Kawin',
        ]);

        $pegawai = Pegawai::factory()->create([
            'stts_wp' => 'TK/0',
        ]);

        $this->assertInstanceOf(SttsWp::class, $pegawai->sttsWpRelation);
        $this->assertEquals('Tidak Kawin', $pegawai->sttsWpRelation->ktg);
    }

    public function test_pegawai_belongs_to_stts_kerja()
    {
        $sttsKerja = SttsKerja::factory()->create([
            'stts' => 'PNS',
            'ktg' => 'Pegawai Negeri Sipil',
        ]);

        $pegawai = Pegawai::factory()->create([
            'stts_kerja' => 'PNS',
        ]);

        $this->assertInstanceOf(SttsKerja::class, $pegawai->sttsKerjaRelation);
        $this->assertEquals('Pegawai Negeri Sipil', $pegawai->sttsKerjaRelation->ktg);
    }

    public function test_pegawai_belongs_to_pendidikan()
    {
        $pendidikan = Pendidikan::factory()->create([
            'tingkat' => 'S1',
            'gapok1' => 3000000,
        ]);

        $pegawai = Pegawai::factory()->create([
            'pendidikan' => 'S1',
        ]);

        $this->assertInstanceOf(Pendidikan::class, $pegawai->pendidikanRelation);
        $this->assertEquals(3000000, $pegawai->pendidikanRelation->gapok1);
    }

    public function test_pegawai_belongs_to_bank()
    {
        $bank = Bank::factory()->create([
            'namabank' => 'Bank BCA',
        ]);

        $pegawai = Pegawai::factory()->create([
            'bpd' => 'Bank BCA',
        ]);

        $this->assertInstanceOf(Bank::class, $pegawai->bankRelation);
        $this->assertEquals('Bank BCA', $pegawai->bankRelation->namabank);
    }

    public function test_pegawai_has_one_dokter()
    {
        $pegawai = Pegawai::factory()->create([
            'nik' => '1234567890123456',
        ]);

        $dokter = Dokter::factory()->create([
            'kd_dokter' => '1234567890123456',
            'nm_dokter' => 'Dr. Test',
        ]);

        $this->assertInstanceOf(Dokter::class, $pegawai->dokter);
        $this->assertEquals('Dr. Test', $pegawai->dokter->nm_dokter);
    }

    public function test_pegawai_has_one_petugas()
    {
        $pegawai = Pegawai::factory()->create([
            'nik' => '1234567890123456',
        ]);

        $petugas = Petugas::factory()->create([
            'nip' => '1234567890123456',
            'nama' => 'Petugas Test',
        ]);

        $this->assertInstanceOf(Petugas::class, $pegawai->petugas);
        $this->assertEquals('Petugas Test', $pegawai->petugas->nama);
    }

    public function test_pegawai_has_many_berkas_pegawai()
    {
        $pegawai = Pegawai::factory()->create([
            'nik' => '1234567890123456',
        ]);

        BerkasPegawai::factory()->count(3)->create([
            'nik' => '1234567890123456',
        ]);

        $this->assertCount(3, $pegawai->berkas_pegawai);
        $this->assertInstanceOf(BerkasPegawai::class, $pegawai->berkas_pegawai->first());
    }

    public function test_pegawai_can_get_enum_values()
    {
        $pegawai = new Pegawai();
        
        // Mock the DB query for enum values
        // In a real scenario, you might want to use a more sophisticated approach
        // This test assumes the getEnumValues method works correctly
        $this->assertTrue(method_exists($pegawai, 'getEnumValues'));
    }

    public function test_pegawai_can_get_photo_url()
    {
        $pegawai = Pegawai::factory()->create([
            'id' => 123,
        ]);

        $photoUrl = $pegawai->getPhotoUrl();
        
        $this->assertStringContains('/pegawai/photo/123', $photoUrl);
    }

    public function test_pegawai_casts_dates_correctly()
    {
        $pegawai = Pegawai::factory()->create([
            'tgl_lahir' => '1990-01-01',
            'mulai_kerja' => '2020-01-01',
            'mulai_kontrak' => '2021-01-01',
        ]);

        $this->assertInstanceOf(\Carbon\Carbon::class, $pegawai->tgl_lahir);
        $this->assertInstanceOf(\Carbon\Carbon::class, $pegawai->mulai_kerja);
        $this->assertInstanceOf(\Carbon\Carbon::class, $pegawai->mulai_kontrak);
    }

    public function test_pegawai_casts_numeric_values_correctly()
    {
        $pegawai = Pegawai::factory()->create([
            'gapok' => 5000000.50,
            'pengurang' => 100000.25,
            'dankes' => 50000.75,
            'wajibmasuk' => 22,
            'cuti_diambil' => 5,
            'indek' => 2,
        ]);

        $this->assertEquals(5000000.50, $pegawai->gapok);
        $this->assertEquals(100000.25, $pegawai->pengurang);
        $this->assertEquals(50000.75, $pegawai->dankes);
        $this->assertEquals(22, $pegawai->wajibmasuk);
        $this->assertEquals(5, $pegawai->cuti_diambil);
        $this->assertEquals(2, $pegawai->indek);
    }
}